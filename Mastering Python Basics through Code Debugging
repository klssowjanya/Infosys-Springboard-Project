1. Data Analysis at DataWars

You're analyzing user engagement data. Review the code and select the correct output.

user_projects = 5
activity_threshold = 4

print("Checking user status...")
if user_projects > activity_threshold:
    print("Active User")
    print(f"Total projects: {user_projects}")
What will be the output?

    Active User
    Total projects: 5
    
    Checking user status...
    
    Checking user status...
    Active User
    Total projects: 5
    
    Checking user status...

    Total projects: 5

Answer:
Checking user status...
    Active User
    Total projects: 5

*****************************************************************************************************************************************************
2. Missing Sale Alert
def check_sales(daily_sales):
    if daily_sales > 100:
        return "Good sales day!"
    else:
        return "Missing target"

sales = 150
check_sales(sales)

*****************************************************************************************************************************************************

3. Bug Hunt: The Missing Projects

def add_projects(project1, project2):
    total = 0
    total += project1  # Line with bug
    total += project2
    return total

# Test the function
result = add_projects(5, 3)
print(f"Total projects: {result}")
*****************************************************************************************************************************************************
4. Temperature Tracker

def check_temperature(temp):
    if temp >= 38:
        return "Fever! Rest needed"
    return "Normal temperature"

temp = 37.5
result = check_temperature(temp)
print(result)

*****************************************************************************************************************************************************

5. Fix the Patient Counter

def add_patient(total):
    total += 1
    return total

patients = 5
new_total = add_patient(patients)
print(f"Total patients: {new_total}")

*****************************************************************************************************************************************************

6. Create Patient Record Variables

# Create variables for patient information
patient_name = "John Miller"
patient_age = 45
patient_temp = 36.8
has_insurance = True

# Display patient information
print(f"Patient: {patient_name}")
print(f"Age: {patient_age}")
print(f"Temperature: {patient_temp}°C")
print(f"Insurance: {has_insurance}")

*****************************************************************************************************************************************************

7. Create Weather App Variables
# Create weather variables
location = "New York City"
temperature = 22.5
conditions = "Partly cloudy"
rain_chance = 0.30  # Stored as decimal for percentage
is_daytime = True

# Display dashboard
print("Weather Dashboard:")
print(location)
print(f"Temperature: {temperature:.1f}°C")
print(f"Conditions: {conditions}")
print(f"Rain Chance: {rain_chance:.0%}")
print(f"Daylight: {is_daytime}")


*****************************************************************************************************************************************************

8. Create E-commerce Product Variables
# Create product variables
product_name = "Gaming Laptop XR-5"
price = 1299.99
stock = 5
free_shipping = True
rating = 4.7

# Display product information
print("Product:", product_name)
print(f"Price: ${price:.2f}")
print("Stock:", stock)
print("Free Shipping:", free_shipping)
print(f"Rating: {rating}/5")

*****************************************************************************************************************************************************
9. Create a Doctor's Appointment Function
def schedule_appointment(name, time):
    if len(name) == 0:
        return "Error: Name required"
    return f"Appointment confirmed for {name} at {time}"

*****************************************************************************************************************************************************

10. Restaurant Bill Calculator
def calculate_bill(meal_cost, tip_percent):
    tip_amount = meal_cost * (tip_percent/100)
    total = meal_cost + tip_amount
    return f"Subtotal: ${meal_cost:.2f}, Total with {tip_percent}% tip: ${total:.2f}"

*****************************************************************************************************************************************************

11. Create a Movie Rating Predictor

def predict_rating(length, genre):
    if length > 180:
        return "Too long, likely 2/5"
    elif genre.lower() == "action":
        return "Popular! 4/5"
    return "Standard 3/5"

*****************************************************************************************************************************************************
12. Create a Social Media Post Analyzer

def analyze_engagement(likes, comments, shares):
    if likes < 0 or comments < 0 or shares < 0:
        return "Invalid input: numbers must be positive"

    total = likes + comments + shares
    if total > 1000:
        return "Viral post!"
    return "Normal post"

*****************************************************************************************************************************************************

13. Fix the Playlist Manager
def manage_playlist(song, rating):
    top_song = ""
    if rating > 4.0:
        top_song = song
    elif rating >= 3.0:
        print("Good song!")
    else:
        print("Skip this one")

    return top_song
*****************************************************************************************************************************************************
14. Pizza Order Calculator
def calculate_pizza_price(size):
    size = size.lower()
    if size == "small":
        price = 8.99
    elif size == "medium":
        price = 12.99
    elif size == "large":
        price = 15.99
    else:
        return "Error: Choose small, medium, or large only"

    return f"{size.capitalize()} pizza: ${price}"

*****************************************************************************************************************************************************

15. Calculate Student Grade
def calculate_grade(score):
    if score >= 90:
        return "A - Excellent!"
    elif score >= 80:
        return "B - Good job"
    elif score >= 70:
        return "C - More practice needed"
    else:
        return "Below C - Schedule tutoring"

*****************************************************************************************************************************************************

16. Coffee Shop Order Validator
def validate_coffee_order(size, coffee_type, temperature):
    # Convert to lowercase
    size = size.lower()
    coffee_type = coffee_type.lower() 
    temperature = temperature.lower()

    # Check size
    if size != "small" and size != "medium" and size != "large":
        return "Invalid size"

    # Check coffee type
    if coffee_type != "espresso" and coffee_type != "latte" and coffee_type != "cappuccino":
        return "Invalid coffee type"

    # Check temperature
    if temperature != "hot" and temperature != "iced":
        return "Invalid temperature"

    return "Valid order"

*****************************************************************************************************************************************************
17. Movie Ticket Price Calculator

def calculate_ticket_price(age, is_tuesday):
    base_price = 12

    if age < 12:
        price = base_price * 0.5
    elif age > 65:
        price = base_price * 0.7
    else:
        price = base_price

    if is_tuesday:
        price = price - 2

    return round(price, 2)


*****************************************************************************************************************************************************
18. Fitness Goal Calculator
def calculate_fitness_goal(current_weight, target_weight, weekly_rate):
    if weekly_rate < 0.5 or weekly_rate > 1:
        return "Weekly rate must be between 0.5-1 kg"

    weight_to_lose = current_weight - target_weight
    weeks = weight_to_lose / weekly_rate
    return round(weeks)



*****************************************************************************************************************************************************

19. Mobile Data Usage Alert
def check_data_usage(gb_used, days_left):
    limit = 50
    remaining = limit - gb_used
    daily_average = remaining / days_left

    if (gb_used / limit) >= 0.8:
        return f"Warning: {remaining}GB left for {days_left} days"
    return f"Safe: {daily_average:.1f}GB/day available"



*****************************************************************************************************************************************************

20. Account Login Handler

def validate_login(username, password):
    try:
        if len(username) < 5:
            raise ValueError("Username too short")
        if not any(char.isdigit() for char in password):
            raise ValueError("Password must contain numbers")
        return "Login successful"
    except ValueError as e:
        return f"Error: {str(e)}"



*****************************************************************************************************************************************************

